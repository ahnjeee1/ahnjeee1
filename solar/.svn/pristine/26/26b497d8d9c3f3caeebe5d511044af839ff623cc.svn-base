package controller;

import java.sql.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import entity.Member;
import repository.MemberRepository;

@Controller
@RequestMapping("/member")
public class MemberController {
	
	private final static Logger log = LoggerFactory.getLogger(MemberController.class);
	
	@Autowired
	MemberRepository memberRepository;
	
	//유저 목록 페이지로 이동
	@RequestMapping(method=RequestMethod.GET)
	public String memberListPageGET(){
		return "member/memberList";
	}
	
	//유저정보 등록 페이지로 이동
	@RequestMapping(value="/register",method=RequestMethod.GET)
	public String memberRegisterPageGET(){
		return "/member/memberRegister";
	}
	
	//유저정보 등록
	@RequestMapping(value="/register",method=RequestMethod.POST)
	public @ResponseBody void memberRegisterPOST(@RequestBody Member member){
		member.setPwUpdate(new Date(System.currentTimeMillis()));
		member.setRegistDate(new Date(System.currentTimeMillis()));
		memberRepository.insertMember(member);
	}
	
	//아이디에 해당하는 회원 정보를 가져옴
	@RequestMapping(value="/{id}",method=RequestMethod.GET)
	public String memberInfoPageGET(@PathVariable("id") String id, Model model){
		Member member= memberRepository.selectOne(id);		
		model.addAttribute("member",memberRepository.selectOne(id)); 
		return "member/memberInfo";
	}
	
	//회원 목록 가져옴
	@RequestMapping(value="/memberList",method=RequestMethod.GET)
	public @ResponseBody List<Member> memberListGET(){
		return memberRepository.getMemberList();
	}
	
	//회원 정보를 수정 
	@RequestMapping(value="/{id}",method=RequestMethod.PUT)
	public @ResponseBody void memberUpdatePUT(@RequestBody Member member){
		memberRepository.updateMember(member);
	}
}
